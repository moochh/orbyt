generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  emailAddress  String   @unique                         @map("email_address")
  passwordHash  String                                   @map("password_hash")
  firstName     String                                   @map("first_name")
  lastName      String                                   @map("last_name")

  spaces        Space[]
  buckets       Bucket[]
  tasks         Task[]
  tags          Tag[]

  createdAt     DateTime @default(now())                 @map("created_at")

  @@map("users")
}

model Space {
  id              Int        @id @default(autoincrement())
  name            String
  colorId         String     @default("default") @map("color_id")
  iconId          String?    @map("icon_id")
  illustrationId  String?    @map("illustration_id")
  orderNumber     Int        @map("order_number")

  userId          Int        @map("user_id")
  user            User       @relation(fields: [userId], references: [id])

  buckets         Bucket[]
  tasks           Task[]

  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt      @map("updated_at")

  @@unique([userId, name])
  @@index([userId])
  @@map("spaces")
}

model Bucket {
  id           Int      @id @default(autoincrement())
  name         String
  orderNumber  Int      @map("order_number")

  userId       Int      @map("user_id")
  user         User     @relation(fields: [userId], references: [id])

  spaceId      Int      @map("space_id")
  space        Space    @relation(fields: [spaceId], references: [id])

  tasks        Task[]

  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt      @map("updated_at")


  @@unique([spaceId, name])
  @@index([userId])
  @@index([spaceId])
  @@map("buckets")
}

model Task {
  id             Int        @id @default(autoincrement())
  title          String
  notes          String?    @map("notes")
  dueDate        DateTime?  @map("due_date")
  priorityLevel  String?    @map("priority_level")
  orderNumber    Int        @map("order_number")
  isDone         Boolean    @default(false) @map("is_done")

  userId         Int        @map("user_id")
  user           User       @relation(fields: [userId], references: [id])

  spaceId        Int        @map("space_id")
  space          Space      @relation(fields: [spaceId], references: [id])

  bucketId       Int?       @map("bucket_id")
  bucket         Bucket?    @relation(fields: [bucketId], references: [id])


  subtasks       Subtask[]
  tags           Tag[]      @relation("TaskTags")

  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt      @map("updated_at")

  @@index([userId])
  @@index([spaceId])
  @@index([bucketId])
  @@map("tasks")
}

model Subtask {
  id           Int      @id @default(autoincrement())
  title        String
  isDone       Boolean  @default(false) @map("is_done")
  orderNumber  Int      @map("order_number")

  taskId       Int      @map("task_id")
  task         Task     @relation(fields: [taskId], references: [id])

  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt      @map("updated_at")

  @@index([taskId])
  @@map("subtasks")
}

model Tag {
  id         Int      @id @default(autoincrement())
  name       String
  colorId    String  @default("default") @map("color_id")

  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id])

  tasks      Task[]   @relation("TaskTags")

  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([userId, name])
  @@map("tags")
}
